

000201
01031126660017ID.CO.EXAMPLE.WWW01159360056701234560215MIDCONTOH1234560303UMI5204123453033605802ID5913NamaMerchant36009NamaKota16110123456789062070703K1963042CBE


Bit 2 of type LL with value = 199360011100000015853
Bit 3 of type N with value = 266000
Bit 4 of type N with value = 000000780000
Bit 7 of type N with value = 0004044220
Bit 11 of type N with value = 794507
Bit 12 of type N with value = 115504
Bit 13 of type N with value = 0426
Bit 17 of type N with value = 0426
Bit 18 of type N with value = 5812
Bit 22 of type N with value = 011
Bit 32 of type LL with value = 0893600111
Bit 37 of type N with value = 000000758964
Bit 38 of type N with value = 325636
Bit 41 of type N with value = DFB453          
Bit 42 of type A with value = 6456FHFD       
Bit 43 of type A with value = RM SEPAKAT 26FIXEDTIP    JAKARTA SELATID
Bit 48 of type LLL with value = 024PI04Q001CD05BAGUSMC03UMI
Bit 49 of type A with value = 360
Bit 57 of type LLL with value = 05061051650062012500000000000000000000005340706DFB453
Bit 100 of type LL with value = 1100093600823
Bit 102 of type LL with value = 199360082300000013391

Bit 2 of type LL with value = 199360011100000015853
Bit 3 of type N with value = 266000
Bit 4 of type N with value = 000000780000
Bit 7 of type N with value = 0426051759
Bit 11 of type N with value = 379839
Bit 12 of type N with value = 121915
Bit 13 of type N with value = 0426
Bit 15 of type N with value = 0426
Bit 17 of type N with value = 0426
Bit 18 of type N with value = 5812
Bit 22 of type N with value = 011
Bit 32 of type LL with value = 0893600111
Bit 33 of type LL with value = 06360002
Bit 37 of type N with value = 000000510677
Bit 38 of type N with value = 000000
Bit 39 of type A with value = 00
Bit 41 of type N with value = DFB453          
Bit 42 of type A with value = 6456FHFD       
Bit 48 of type LLL with value = 024PI04Q001CD05BAGUSMC03UMI
Bit 49 of type A with value = 360
Bit 100 of type LL with value = 0893600823
Bit 102 of type LL with value = 199360082300000013391
Bit 123 of type LLL with value = 02011876696151187669615


Bit 2 of type LL with value = 199360011100000015853
Bit 3 of type N with value = 266000
Bit 4 of type N with value = 000000780000
Bit 7 of type N with value = 0426045348
Bit 11 of type N with value = 794507
Bit 12 of type N with value = 115504
Bit 13 of type N with value = 0426
Bit 15 of type N with value = 0426
Bit 17 of type N with value = 0426
Bit 18 of type N with value = 5812
Bit 22 of type N with value = 011
Bit 32 of type LL with value = 0893600111
Bit 33 of type LL with value = 06360002
Bit 37 of type N with value = 000000758964
Bit 38 of type N with value = 000000
Bit 39 of type A with value = 00
Bit 41 of type N with value = DFB453          
Bit 42 of type A with value = 6456FHFD       
Bit 48 of type LLL with value = 024PI04Q001CD05BAGUSMC03UMI
Bit 49 of type A with value = 360
Bit 100 of type LL with value = 0893600823
Bit 102 of type LL with value = 199360082300000013391
Bit 123 of type LLL with value = 02011876696141187669614


Bit 2 of type LL with value = 199360011100000015853
Bit 3 of type N with value = 266000
Bit 4 of type N with value = 000000780000
Bit 7 of type N with value = 0426031110
Bit 11 of type N with value = 555979
Bit 12 of type N with value = 101226
Bit 13 of type N with value = 0426
Bit 15 of type N with value = 0426
Bit 17 of type N with value = 0426
Bit 18 of type N with value = 5812
Bit 22 of type N with value = 011
Bit 32 of type LL with value = 0893600111
Bit 33 of type LL with value = 06360002
Bit 37 of type N with value = 000000684492
Bit 38 of type N with value = 000000
Bit 39 of type A with value = 00
Bit 41 of type N with value = DFB453          
Bit 42 of type A with value = 6456FHFD       
Bit 48 of type LLL with value = 024PI04Q001CD05BAGUSMC03UMI
Bit 49 of type A with value = 360
Bit 100 of type LL with value = 0893600823
Bit 102 of type LL with value = 199360082300000013391
Bit 123 of type LLL with value = 02011876696121187669612

-------Refund-------------------------------------
Bit 2 of type LL with value = 199360082300000013499
Bit 3 of type N with value = 200060
Bit 4 of type N with value = 000015000000 (Done)
Bit 7 of type N with value = 0427093452 (Done)
Bit 11 of type N with value = 008532 (Done)
Bit 12 of type N with value = 162525
Bit 13 of type N with value = 0427
Bit 15 of type N with value = 0427
Bit 17 of type N with value = 0427
Bit 18 of type N with value = 5812
Bit 22 of type N with value = 011
Bit 32 of type LL with value = 0893600111
Bit 33 of type LL with value = 06360002
Bit 37 of type N with value = 236210593769
Bit 41 of type N with value = FEF234           (DOne)
Bit 42 of type A with value = 006545655      
Bit 43 of type A with value = RM SEPAKAT 26STAT        JAKARTA SELATID
Bit 48 of type LLL with value = 024PI04Q001CD05BAGUSMC03UMI
Bit 49 of type A with value = 360
Bit 100 of type LL with value = 0893600823
Bit 102 of type LL with value = 199360011100000015853
Bit 123 of type LLL with value = 02011876697040000334853
-------Refund-------------------------------------

000201
010212
2662
0017ID.CO.BANKDKI.WWW
0118936001110000001585
020800001585
0303UMI
52045812
5303360
54071001.00
5802ID
5913RM SEPAKAT YA
6015JAKARTA SELATAN
610512920
6207
0703D0163040C23

000201
010212
26620017ID.CO.BANKDKI.WWW
0118
936001110000001585
020800001585
0303UMI
52045812 (Done)
5303360 (Done)
54071001.00 (done)
5802ID (done)
5913RM SEPAKAT YA   (Done)
6015JAKARTA SELATAN (Done)
610512920
62070703D01
63040C23

000201
010211
26630017ID.CO.BANKDKI.WWW
0118936001110000001585
0209006545655
0303UMI
52045812
5303360
550201
5802ID
5917RM SEPAKAT 26STAT
6015JAKARTA SELATAN
6105105256239012500000000000000000000005340706FEF234
6304E9C0

000201
010211
26620017ID.CO.BANKDKI.WWW
0118936001110000001585
020800001585
0303UMI
52045812
5303360
5802ID
5913RM SEPAKAT YA
6015JAKARTA SELATAN
61051292055020162070703D01
630433BA

000201
010212
261910017ID.CO.PAPRIKA.WWW
0118936008230000000154
02300000000191
0303520458125303360540105802ID5922ASIA PARKING - BINTARO6007JAKARTA6100PI04Q001EZIIPQNMOC6304EF52

00020101021126630017ID.CO.BANKDKI.WWW011893600111000000158502090065456550303UMI5204581253033605502015802ID5917RM SEPAKAT 26STAT6015JAKARTA SELATAN6105105256239012500000000000000000000005340706FEF2346304E9C0

00020101021126620017ID.CO.BANKDKI.WWW01189360011100000015850208000015850303UMI5204581253033605802ID5913RM SEPAKAT YA6015JAKARTA SELATAN61051292055020162070703D01630433BA

------For TEST QRIS DINAMIS-------
000201 6
010212 6
26620017ID.CO.BANKDKI.WWW 25
0118 4
936001110000001585 18
020800001585 67
0303UMI 74 
52045812 82 
5303360 89
54071001.00
5802ID
5913RM SEPAKAT YA
6015JAKARTA SELATAN
610512920
62070703D01
63040C23

NEWW 1
000201
010211
26620017ID.CO.BANKDKI.WWW
0118936001110000001585
020800001585
0303UMI
52045812 (Done)
5303360
5802ID
5922RM SEPAKAT 26STATNOTIP (Done)
6015JAKARTA SELATAN
610513546
6236012500000000000000000000005790703D01
6304F0AD

NEW 2
000201
010212
26620017ID.CO.BANKDKI.WWW
0118936001110000001585
0208A1564254
0303UMI
52045812
5303360
5409110000.00
5802ID (Done)
5922RM SEPAKAT 26DYNANOTIP
6015JAKARTA SELATAN (Done)
610512456
6236012500000000000000000000005790703D07
63049860

000201
010211
27660017ID.CO.EXAMPLE.WWW
0115936009250123456
0215MIDCONTOH123456
0303UMI
52041234
5303360
5802ID
5914NamaMerchantA3
6009NamaKota1
61101234567890
62070703K196304545D

000201
01031126660017ID.CO.EXAMPLE.WWW01159360056701234560215MIDCONTOH1234560303UMI5204123453033605802ID5913NamaMerchant36009NamaKota16110123456789062070703K1963042CBE

000201
010211
26660017WWW.EXAMPLE.CO.ID
0115
936005670123456
0215MIDCONTOH1234560303UMI5204123453033605802ID5913NamaMerchant36009NamaKota16110123456789062070703K196304005F


00020101021126660017ID.CO.EXAMPLE.WWW
0115
936112340123456
0215MIDCONTOH1234560303UMI5204123453033605802ID5913NamaMerchant36009NamaKota16110123456789062070703K196304E776

00020101021126700017ID.CO.EXAMPLE.WWW
0119
9360056701234567890
0215MIDCONTOH1234560303UMI5204123453033605802ID5913NamaMerchant36009NamaKota16110123456789062070703K196304D71A

000201
010211
26670018ID.CO.EXAMPLE2.WWW
0115936005670123456
0215MIDCONTOH123456
0303UMI

27660017ID.CO.EXAMPLE.WWW
0115936009250123456
0215MIDCONTOH123456
0303UMI

52041234
53033605802ID5914NamaMerchantB36009NamaKota16110123456789062070703K196304A00F

000201
010211
26660017ID.CO.EXAMPLE.WWW
0115936009250123456
0215MIDCONTOH123456
0303UMI
52041234
5303360
5802ID
5914NamaMerchantA1
6009NamaKota16110123456789062070703K19
63045746

000201
010211
27670018ID.CO.EXAMPLE2.WWW
0115936005670123456
0215MIDCONTOH1234560303UMI5204123453033605802ID5914NamaMerchantC36009NamaKota16110123456789062070703K196304C86F

000201
010211
26660017ID.CO.EXAMPLE.WWW
0115936009250123456
0215MIDCONTOH123456
0303UMI
27670018ID.CO.EXAMPLE2.WWW01159360056701234560215MIDCONTOH1234560303UMI
52041234
53033605802ID5914NamaMerchantB16009NamaKota16110123456789062070703K1963047FB7

New 3
000201
010211
26660017ID.CO.BANKDKI.WWW (done) 38 --
0118936001110000001585    (done) 63 --
0212235DFGE53234          (done) -- 79
0303UMI                   (done)
51320002000215ID10190000000170303UMI 
52045812
5303360
550201
5802ID
5924RM SEPAKAT DI 2651STATIC
6015JAKARTA SELATAN
610515688
623801220000000000000034534545
0708WFB23350
WFB23350
63047F27

000201
010211
26660017ID.CO.EXAMPLE.WWW
0115936005670123456
0215MIDCONTOH123456
0303UMI
52051234553
03360
5802ID5913NamaMerchant36009NamaKota16110123456789062070703K19630470FC

00020
10102
1126660017ID.CO.EXAMPLE.WWW
0115936005670123456
0215MIDCONTOH123456
0303UMI
520512345
53
03360
5802ID5913NamaMerchant36009NamaKota161101234567890
62070703K19630470FC

00020101021126660017ID.CO.EXAMPLE.WWW01159360056701234560215MIDCONTOH1234560303UMI5204123453033605802ID5913NamaMerchant36009NamaKota161101234567890
626304DBEF

000201
010212
26110017ID.CO.PAPRIKA.WWW
01219360082300811 612 010
02100000000001
0303UMI
52045813
5303360
540550000
5802ID
5918MASTERCHEF SEAFOOD
6005MEDAN
6100
622737HnY8tSodqK9VYKEvb4m8voKd2
6304EF52

00020101021226110017ID.CO.PAPRIKA.WWW0118936008230081161201021000000000010303UMI5204581353033605405500005802ID5918MASTERCHEF SEAFOOD6005MEDAN61053419362290137HnY8tSodqK9VYKEvb4m8voKd26304EF52

00020101021126660017ID.CO.PAPRIKA.WWW
0118936001110000001585
0212235DFGE53234
0303UMI
51320002000215ID10190000000170303UMI
52045812
5303360
5409110000.00
5503012
560520000
570210
5802ID
5924RM SEPAKAT DI 2651STATIC
6015JAKARTA SELATAN
610515688
6238
01220000000000000034534545
0708WFB23350
63047F27

New 3
000201
010211
26660017ID.CO.BANKDKI.WWW (done) 38 --
0118936001110000001585    (done) 63 --
0212235DFGE53234          (done) -- 79
0303UMI                   (done)
51320002000215ID10190000000170303UMI 
52045812
5303360
550201
5802ID
5924RM SEPAKAT DI 2651STATIC
6015JAKARTA SELATAN
610515688
623801220000000000000034534545
0708WFB23350
WFB23350
63047F27

000201
010212
26
620017ID.CO.BANKDKI.WWW
0118936001110000001585
0208548737HD
0303UMI
51320002000215ID10190000000170303UMI
52045812
5303360
5409210000.00
5502015802ID
5924RM SEPAKAT DI 2651STATIC
6015JAKARTA SELATAN
610512525
623401190000000000000033747
0707
RTE4743
6304BAE4
==--INQUIRY CHECK--==

00020101021151320002000215ID10190000000170303UMI5204581253033605502015802ID5925RM SEPAKAT DI 51STATINPAM6015JAKARTA SELATAN610513565623801210000000000004562424530709435FGDFGS630430B2


benar
0210
F23AC4018EC180800000000014000000
199360000019000000017
3760000000000000000630080714219391150834063006300630581201111000936000000636000200000083829849295200435FGDFGS       ID1019000000017008PI04IQ023
60052264801189360011200000015850215D01            0303UMI110009360082318936008231234567891

salah
0210F23AC4018EC1808000000000140000001993600000191234567813760000000000000000630080111192819150231063006300630123401111000936000000636000200000019381949295203K19             ID1019123456781008PI04IQ02360000110009360082318936008231234567891




{"additional_data_national": "61051234567890620703K19", "amount": "0", "system_trance_audit_number": "192819", "merchant_type": "1234", "nmid": "19123456781", "amount_fee": "", "card_acceptor_name_location": "NamaMerchant2F1          NamaKota1    ID", "card_acceptor_id": "ID1019123456781", "card_acceptor_terminal_identification": "K19             ", "account_identification": "936008231234567891", "additional_data": "PI04IQ02", "transaction_id": "193819"}


{"additional_data_national": "6105135656201210000000000004562424530709435FGDFGS", "amount": "0", "system_trance_audit_number": "192819", "merchant_type": "5812", "nmid": "19000000017", "amount_fee": "", "card_acceptor_name_location": "RM SEPAKAT DI 51STATINPAMJAKARTA SELATID", "card_acceptor_id": "ID1019000000017", "card_acceptor_terminal_identification": "435FGDFGS       ", "account_identification": "936008231234567891", "additional_data": "PI04IQ02", "transaction_id": "838298"}

000201
010211
5132000200
0215ID
1019000000017
0303UMI
52045812
5303360
5502015802ID5925RM SEPAKAT DI 51STATINPAM6015JAKARTA SELATAN610513565623801210000000000004562424530709435FGDFGS630430B2

000201
010211
51
32
000200
0215ID
1019000000017
0303UMI
52045812
5303360
550201
5802ID
5925RM SEPAKAT DI 51STATINPAM
6015JAKARTA SELATAN
6105135656238012100000000000045
62424530709435FGDFGS
630430B2


00020101021226
62
0017ID.CO.BANKDKI.WWW
0118936001110000001585
0208548737HD
0303UMI
51320002000215ID10190000000170303UMI
52045812
5303360
5409210000.00
550201
5802ID
5924RM SEPAKAT DI 2651STATIC
6015JAKARTA SELATAN
610512525
623401190000000000000033747
0707
RTE4743
6304BAE4

000201
010211
26630017ID.CO.BANKDKI.WWW
0118936001110000001585
0209006545655
0303UMI
52045812
5303360
550201
5802ID
5917RM SEPAKAT 26STAT
6015JAKARTA SELATAN
6105105256239012500000000000000000000005340706FEF234
6304E9C0


-==="ACQUIRER CHECK"===-

00020101021126680017ID.CO.PAPRIKA.WWW
0118936008230000000154
0214023000000001970303UKE5204581253033605802ID5919ASIA PARKING - SCBD
6007JAKARTA
610512760
63046629

000201
010211
26
68
0017ID.CO.PAPRIKA.WWW0
118936008230000000154
021402300000000197
0303UKE
52045812
5303360
5802ID
5919ASIA PARKING - SCBD
6007JAKARTA
610512760
63046629

00201
010211
26680017ID.CO.PAPRIKA.WWW
01189360082300000001970
214023000000001970303UKE5204581253033605802ID5919ASIA PARKING - SCBD6007JAKARTA61051276063043CDF

000201
010211
26
1970017ID.CO.PAPRIKA.WWW936008230000000154023000000001970303520458125303360540105802ID5919ASIA PARKING - SCBD6007JAKARTA6100PI04Q001YN1C6H1UHY6304EF52

000201
010211
2668
0017ID.CO.PAPRIKA.WWW0118936008230000000154
021402300000000197
0303UKE
5208
52045812
5303360
5802ID
5919ASIA PARKING - SCBD
6007JAKARTA6100
63049DFE

000201
010212
26
620017ID.CO.BANKDKI.WWW
0118936001110000001585
0208548737HD
0303UMI
51320002000215ID10190000000170303UMI
52045812
5303360
5409210000.00
5502015802ID
5924RM SEPAKAT DI 2651STATIC
6015JAKARTA SELATAN
610512525
623401190000000000000033747
0707
RTE4743
6304BAE4

00020101021151320002000215ID10190002300170303UMI5204581253033605502015802ID5922RM SEPAKAT DI 51INVMRC6015JAKARTA SELATAN610513565623801210000000000004562424530709435FGDFGS630425C1

PAN => 936001113520950506
NMID 
NNS Acquirer
Card Acceptor ID
Merchant Criteria get_id_root_03


104
2648
01
18936001113520950506
0215G520950506     
0303UMI
2748
01
18936001129875412350
0215BRT45678912    
0303UMI

052
26
48
01
18936001129875412350
0215BRT45678912    
0303UMI


00020101021151320002000215ID10190000000170303UMI5204581253033605502015802ID5925RM SEPAKAT DI 51STATINPAM6015JAKARTA SELATAN610513565623801210000000000004562424530709435FGDFGS630430B2

1042648
0118936001113520950506
0215G520950506     
0303UMI
2748
0118936001129875412350
0215BRT45678912    
0303UMI
==--INQUIRY CHECK--==

000201010211
26670018ID.CO.EXAMPLE2.WWW
0115936005670123456
0215MIDCONTOH123456
0303UMI
27670018ID.CO.EXAMPLE3.WWW
0115936000130123456
0215MIDCONTOH123456
0303UKE
2867
0018ID.CO.EXAMPLE4.WWW
0115936009110123456
0215MIDCONTOH123456
0303UMI


000201
010211
2767
0018ID.CO.EXAMPLE2.WWW
0115936005670123456
0215MIDCONTOH123456
0303UMI
52041234
5303360
5802ID
5914NamaMerchantC3
6009NamaKota1
6110123456789062070703K19
6304C86F

000201
010211
5144
0014ID.CO.QRIS.WWW
0215ID1019123456781
0303UMI
52041234
5303360
5802ID
5915NamaMerchant2F1
6009NamaKota1
61101234567890
62070703K19
6304D779


52041234
5303360
5802ID
5914NamaMerchantD1
6009NamaKota1
61101234567890
62070703K19
6304548C

0210F23AC4018EC1808000000000140000001993600000191234567813760000000000000000630072508389328142627063006300630123401111000936000000636000200000083829849295203K19             ID1019123456781008PI04IQ02360000110009360082318936008231234567891

000201
010211
51440014ID.CO.QRIS.WWW
0215ID10191234567810303UMI5204123453033605802ID5915NamaMerchant2F16009NamaKota16110123456789062070703K196304D779

00020101021126670018ID.CO.EXAMPLE2.WWW01159360056701234560215MIDCONTOH1234560303UMI276
70018ID.CO.EXAMPLE3.WWW01159360001301234560215MIDCONTOH1234560303UKE28670018ID.CO.EXAM
PLE4.WWW01159360091101234560215MIDCONTOH1234560303UMI5204123453033605802ID5914NamaMer
chantD16009NamaKota16110123456789062070703K196304548C

00
01
26 (Done)
01 (Done)
02 (Done)
03 (Done)
51 (Done)
52 (Done)
53 (Done)
54 (Done)
55 (Done)
56 (Done)
57 (Done)
58 (Done)
59 (Done)
60 (Done)
61 (Done)
62 (Done)
63

26
49
01
19
1234567890123456789
02
15
123456789012345
0303UMI
+0200f238c4010ce1808000000000140000001893600111000000158326600000000010000000040832467434761634560420042058120111100093600111000000486601300001D01             1585           RM SEPAKAT DI            JAKARTA SELATID023PI04Q001CD04BUDIMC03UMI36002061051292062070703D011100093600823199360092312345678975

0200f238c4010ce180800000000014000000
18936001110000001583
2660000000001000000004083246743476163456042004205812011110009360011100000048660
1300001
D01             1585           RM SEPAKAT DI            JAKARTA SELATID023PI04Q001CD04BUDIMC03UMI36002061051292062070703D011100093600823199360092312345678975

,0200f238c4010ce1808000000000140000001893600111000000158326600000001000000000040205576016870908300421042158120111100093600111000000880402271619000000000000000000001585       RM SEPAKAT DI            JAKARTA SELATID024PI04Q001CD05BAGUSMC03UMI36002061051292062070703D011100093600823199360092312345678975

,0200f238c4010ce18080000000001400000019936001110000001585326600000000010010000040832462817311604090420042058120111100093600111000000197471300001D01             1585           RM SEPAKAT YA            JAKARTA SELATID023PI04Q001CD04BUDIMC03UMI36002061051292062070703D011100093600823199360092312345678992

00020101021226620017ID.CO.BANKDKI.WWW01189360011100000015850208000015850303UMI52045812530336054071001.005802ID5913RM SEPAKAT YA6015JAKARTA SELATAN61051292062070703D0163040C23

J0200f238c4010ce18080000000001400000019936001110000001585326600000001100000000040045589818300746090422042258120111100093600111000000760166
222023D07             A1564254       RM SEPAKAT 26DYNANOTIP   JAKARTA SELATID024PI04Q001CD05BAGUSMC03UMI3600496105124566236012500000000000000000000005790703D071100093600823199360082300000013391

------For TEST STATIS------
000201 6
010211 6 41
26620017ID.CO.BANKDKI.WWW 25
0118 4
936001110000001585 18
020800001585 (Done)
0303UMI (Done)
52045812 (Done)
5303360
550201
5802ID (Done)
5913RM SEPAKAT DI
6015JAKARTA SELATAN
610512120
62070703D01
6304C37A

00020101021126620017ID.CO.BANKDKI.WWW01189360011100000015850208000015850303UMI5204581253033605502015802ID5913RM SEPAKAT DI6015JAKARTA SELATAN61051212062070703D016304C37A

0200f23ac4010ce180800000000014000000189360011100000015852630000000001001000413040332839280132401041304140413581203111000936008230000008413123000010000026286512351000000000001585000000000000000000000000000RM SEPAKAT YA023PI04Q001CD04BUDIMC03UMI36003361051292062119CREATE QRIS REQUEST1100093600823
199360092512345678999

0118
93600111
0000001585

57 (Check Done)
43
41

80200f238c4010ce180800000000014000000
199360011100000015853263000000000100100000406295783928113382804140414581201111000936008230000008413123000010000000000703D01000000000001585RM SEPAKAT DI            JAKARTA SELATID023PI04Q001CD04BUDIMC03UMI3600326105129206219CREATE QRIS REQUEST1100093600823199360092512345678999

80200f238c4010ce180800000000014000000199360011100000015853263000000000100100000406295783928113304604140414581201111000936008230000008413123000010000000000703D01000000000001585RM SEPAKAT DI            JAKARTA SELATID023PI04Q001CD04BUDIMC03UMI3600326105129206219CREATE QRIS REQUEST1100093600823199360092512345678999



200
f238c4010ce180800000000014000000199360011100000015853263000000000100100000406181183928113250704140414581201111000936008230000008413123000010000000000703D01000000000001585RM SEPAKAT DI            JAKARTA SELATID023PI04Q001CD04BUDIMC03UMI3600326105129206219CREATE QRIS REQUEST1100093600823199360092512345678999

N0810822000000201000004000000000000000413034435395115
000176011002112N003602
001



9x2 18 9
3x1  3 3
6x2 12 12
0x1  0
0x2 0
1x1 1  4
1x2 2 
1x1 1
0x2 0
0x1 0
0x2 0
0x1 0
0x2 0
0x1 0
1x2 2
5x1 5  7
8x2 16 21
5x1 5

9+3+12+4+7+21
10-6

0200f23ac4010ce18080000000001400000
018936001112000001585
2630000000001001000413065733839280135754041304140413581203111000936008230000008413123000010000026286512351000000000001585000000000000000000000000000RM SEPAKAT YA023PI04Q001CD04BUDIMC03UMI36003361051292062119CREATE QRIS REQUEST1100093600823199360092512345678999

<0800822200000000000004000000000000000
412163
0010304270412201

00020101021226660018ID.CO.BANKMEGA.WWW01189360042600000000050211000002628650303UBE5204581253033605405202005502015802ID5925MSP CARREFOUR LEBAK BULUS6007JAKARTA61051031062270123MID201904301507100n0p6v
6304
EF52

0810822200000200000004000000000000000412022212
103106
0412
00
201

0810822200000200000004000000000000000412041513
030427
0412
00
201

081082220000020000000400000000000000
0412
0212247299300000
00
201


00201
0010212
2662
0017ID.CO.BANKDKI.WWW
0118936001110000001585
020800001585
0303UMI
52045812
5303360
54071001.00
5802ID
5913RM SEPAKAT YA
6015JAKARTA SELATAN
610512920
6207
0703D01
63040C23

Merujuk ISO/IEC 13239 dan menggunakan n polynomial '1021' (hex) dan initial Value 'FFFF' (hex)

0176011002112N003602
0176011001112N003602

000201
010212
2666
0017ID.CO.PAPRIKA.WWW
0118 936004260000000005
0118 936008230000000003
020533111
0303UMI
52045812
5303360
540526200
5802ID
5925MSP CARREFOUR LEBAK 
BULUS
6007JAKARTA
610510310
6227

K0800822000000001000004000000000000000412073706358132
0176011002112N003602
001
017
6011002112N003602

9081082200000020000000400000000000000041209065503029500
002

P0810
822000000201000004000000000000000412065
6330302070
00
20
0176011001112N003602
001

000201 (Merchant PAN)
010212 ()
2658
0016ID.CO.SHOPEE.WWW
0118936009180000022111
020522111
0303UMI
51440
014ID.CO.QRIS.WWW
0215ID1020028482047
0303UMI
52045399
5303360
540812000.00
5802ID
5907RoomAcc
6015KOTA JAKARTA SE
610512140
6214
05103993009342

630477D3


def save_log_transactions(msg):
    msg_data = str(msg)
    d = {}
    pack = ISO8583()
    pack.setNetworkISO(msg)
    v1 = pack.getBitsAndValues()
    pan=""
    amount=""
    transmition_date_time=""
    timetrace=""
    local_transaction_time=""

    local_transaction_date=""
    settlement_date=""
    capture_date=""
    merchant_type=""
    point_service_entry_mode=""

    amount_convenience_fee=""
    acquiring_institution_id=""
    forwarding_institution_id=""
    retrieval_reference_number=""
    approval_code=""

    response_code=""
    card_acceptor_terminal_identification=""
    card_acceptor_id=""
    card_acceptor_name_location=""
    additional_data=""
    additional_data=""

    issuer_id=""
    account_identification=""
    invoice_number=""

    for v in v1:
        if v['bit']=="70":
            network_msg=v['value']
        if v['bit']=="39":
            response_code=v['value']
        if v['bit']=="11":
            timetrace=v['value']

    d["data_iso"] = msg_data
    d["mti"] = pack.getMTI()
    d["nmic"] = network_msg
    d["response_code"] = response_code
    d["timetrace"] = timetrace

    data_msg = json.dumps(d)
    headers = {
        "Content-type": "application/json",
        "Accept": "application/json"
    }
    url = "http://api.jellytechno.com/api/save-log"
    response = requests.post(url, data=data_msg, headers=headers)
    print (response)

000201
010212
2658
0016ID.CO.SHOPEE.WWW
0118936009180000022111
020522111
0303UMI
51440
014ID.CO.QRIS.WWW
0215ID1020028482047
0303UMI
52045399
5303360
540812000.00
5802ID
5907RoomAcc
6015KOTA JAKARTA SE
610512140
6214
05103993008938
63044DA1

    iso = ISO8583()
    iso.setMTI('0200')
    iso.setBit(2,'9360082395320541351') #From Client
    iso.setBit(3,'263000')
    iso.setBit(4,'000005200000')
    iso.setBit(7,gmt) #Generate From Sistem
    iso.setBit(11,'281983')
    iso.setBit(12,'233719') #Generate From Sistem
    iso.setBit(13,'0331') #Generate From Sistem
    iso.setBit(15,'0331') #Generate From Sistem
    iso.setBit(17,'0331') #Generate From Sistem
    iso.setBit(18,'5812') 
    iso.setBit(22,'032')
    iso.setBit(28,'C00200000') #From Client
    iso.setBit(32,'00093600823') 
    iso.setBit(33,'00000360002')
    iso.setBit(37,'300000000001')
    iso.setBit(38,'300001')
    iso.setBit(41,'0000000012345689')
    iso.setBit(42,'00000012345689')
    iso.setBit(43,'MSP CARREFOUR LEBAK BULUS') #From Client
    iso.setBit(48,'PI04Q001CD04BUDIMC03UMI') #From Client
    iso.setBit(49,'360') #From Client
    iso.setBit(57,'61051031062119CREATE QRIS REQUEST') #Generate From Sistem
    iso.setBit(100,'00093600823')
    iso.setBit(102,'9360082395320541351')


from flask import Flask, url_for, send_from_directory,render_template, request, jsonify
from flask_cors import CORS
import logging, os
import requests
import wget
import urllib
import multiprocessing
from multiprocessing import Process, Queue

import threading
import datetime
from datetime import date
from time import gmtime, strftime
import random
import shutil
import uuid
import json
import socket
import time
from bson.objectid import ObjectId
from bson import ObjectId

#-----For ISO8383 Library-----#
from random import choice
from string import digits
from lib_ISO_8583.ISO8583 import ISO8583
from lib_ISO_8583.ISOErrors import *

from extensions.socket_libary import *

#---Setup Connection Socket-----#
HEADER = 64
PORT = 8001
#SERVER = socket.gethostbyname(socket.gethostname())
SERVER = '127.0.0.1'
ADDR = (SERVER, PORT)
FORMAT = 'utf-8'
maxConn=100
DISCONNECT_MESSAGE = "!DISCONNECT"
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect(ADDR)
print(ADDR)
status_set=0
set_api=1
#---Setup Connection Socket-----#


#---------------Addional Data--------------
a = datetime.now()
mounth = int(a.strftime('%m'))
def concat(*args):
    string = ''
    for each in args:
        string += str(each)
    return int(string)
timeback=(time.strftime("%d%I%M%S", time.gmtime()))
print (timeback)
gmt=int(''.join(str(x) for x in (mounth,timeback)))
code = list()
for i in range(6):
    code.append(choice(digits))
unique_id=''.join(code)
#---------------Addional Data--------------


#---------------Response -----------------#
def get_response_qr_credit_request(msg):
    switcher = {
        "00": "Approved",
        "03": "Invalid Merchant, this RC can be used by acquirer if there is no longer business with the merchant.",
        "05": "Do not Honor",
        "12": "Invalid Transaction",
        "13": "Invalid Amount",
        "14": "Invalid PAN Number",
        "30": "Format Error",
        "51": "Insuficient funds",
        "57": "Transaction Not Permitted to Cardholder / QR is expired",
        "58": "Transaction Not Permitted to terminal",
        "59": "Suspected Fraud",
        "61": "Exceeds Transaction Amount Limit",
        "62": "Restricted Card",
        "65": "Exceeds Transaction Frequency Limit",
        "68": "Suspend Transaction",
        "90": "Cut Off in Progress",
        "91": "Link Down",
        "92": "Invalid Routing",
        "94": "Duplicate Transmission / Duplicate QR",
        "96": "System Malfunction"
    }
    return switcher.get(msg, "Invalid Status")
#---------------Response -----------------#


#------------------All Request----------------#
def logon():
    print("Send Logon Frist")
    iso = ISO8583()
    iso.setMTI('0800')
    iso.setBit(7,gmt)
    iso.setBit(11,unique_id)
    iso.setBit(48,'6011002112N003602')
    iso.setBit(70,'001')
    try:
        message = iso.getNetworkISO()
        s.send(message)
        print ('Sending ... %s' % message)
        ans = s.recv(2048)
        print ("\nResponse ASCII |%s|" % ans)
        isoAns = ISO8583()
        isoAns.setNetworkISO(ans)
        v1 = isoAns.getBitsAndValues()
        for v in v1:
            print ('Bit %s of type %s with value = %s' % (v['bit'],v['type'],v['value']))
        if isoAns.getMTI() == '0810':
            print ("\tThat's great !!! The server understand my message masuk!!!")
            status="success"
        else:
            print ("The server dosen't understand my message!")
            status="failed"
    except InvalidIso8583, ii:
        print ii
        status="failed"

    if(status=="success"):
        return ("Success")

    else:
        return ("Failed")

def log_out():
    print("Send Logon Frist")
    iso = ISO8583()
    iso.setMTI('0800')
    iso.setBit(7,gmt)
    iso.setBit(11,unique_id)
    iso.setBit(70,'002')
    try:
        message = iso.getNetworkISO()
        s.send(message)
        print ('Sending ... %s' % message)
        ans = s.recv(2048)
        print ("\nResponse ASCII |%s|" % ans)
        isoAns = ISO8583()
        isoAns.setNetworkISO(ans)
        v1 = isoAns.getBitsAndValues()
        for v in v1:
            print ('Bit %s of type %s with value = %s' % (v['bit'],v['type'],v['value']))
        if isoAns.getMTI() == '0810':
            print ("\tThat's great !!! The server understand my message !!!")
            status="success"
        else:
            print ("The server dosen't understand my message!")
            status="failed"
    except InvalidIso8583, ii:
        print ii
        status="failed"

    if(status=="success"):
        return jsonify(status='success',error=False,
            description=("Logoff Request Success, Response Data = %s" % (ans)),data_iso=ans) 
    else:
        return ("Logoff Request Failed, Response Data = %s" % (ans))


def echotest():
    print("Send Echo Test")
    iso = ISO8583()
    iso.setMTI('0800')
    iso.setBit(7,gmt)
    iso.setBit(11,unique_id)
    #iso.setBit(48,'6011002112N003602')
    iso.setBit(70,'301')
    global status_set
    try:
        message = iso.getNetworkISO()
        s.send(message)
        print ('Sending ... %s' % message)
        print("Disini OK")
        ans = s.recv(2048)
        print ("\nResponse ASCIIS |%s|" % ans)
        isoAns = ISO8583()
        isoAns.setNetworkISO(ans)
        v1 = isoAns.getBitsAndValues()
        for v in v1:
            print ('Bit %s of type %s with value = %s' % (v['bit'],v['type'],v['value']))
        if isoAns.getMTI() == '0810':
            print ("\tThat's great !!! The server understand my message masuk data!!!")
            status="success"
        else:
            print ("The server dosen't understand my message!")
            status="failed"
    except InvalidIso8583, ii:
        print ii
        status="failed"
    status_set=0
    if(status=="success"):
        return jsonify(status='success',error=False,
            description=("Echo Request Success, Response Data = %s" % (ans)),data_iso=ans) 

    else:
        return jsonify(status='success',error=False,
            description=("Echo Request Failed, Response Data = %s" % (ans)),data_iso=ans) 

#------------------All Request----------------#



#------------------All Response----------------#
def echo_response():
    print("Send Echo Response")
    iso = ISO8583()
    iso.setMTI('0800')
    iso.setBit(7,gmt)
    iso.setBit(11,unique_id)
    iso.setBit(39,'00')
    #iso.setBit(48,'6011002112N003602')
    iso.setBit(70,'301')
    try:
        message = iso.getNetworkISO()
        s.send(message)
        print ('Sending ... %s' % message)
        isoAns = ISO8583()
        isoAns.setNetworkISO(ans)
        v1 = isoAns.getBitsAndValues()
        for v in v1:
            print ('Bit %s of type %s with value = %s' % (v['bit'],v['type'],v['value']))
        if isoAns.getMTI() == '0810':
            print ("\tThat's great !!! The server understand my message !!!")
        else:
            print ("The server dosen't understand my message!")
    except InvalidIso8583, ii:
        print ii
    return ("Response : %s" % ans)

def logon_response():
    print("Send Logon Response")
    iso = ISO8583()
    iso.setMTI('0800')
    iso.setBit(7,gmt)
    iso.setBit(11,unique_id)
    iso.setBit(48,'6011002112N003602')
    iso.setBit(70,'001')
    try:
        message = iso.getNetworkISO()
        s.send(message)
        print ('Sending ... %s' % message)
        #ans = s.recv(2048)
        #print ("\nResponse ASCII |%s|" % ans)
        #isoAns = ISO8583()
        #isoAns.setNetworkISO(ans)
        #v1 = isoAns.getBitsAndValues()
        #for v in v1:
            #print ('Bit %s of type %s with value = %s' % (v['bit'],v['type'],v['value']))
        #if isoAns.getMTI() == '0810':
            #print ("\tThat's great !!! The server understand my message !!!")
        #else:
            #print ("The server dosen't understand my message!")
    except InvalidIso8583, ii:
        print ii
#------------------All Response----------------#


def handle_client_incoming(msg):
    print ("Koneksi masuk")
    print (status_set)
    msg_data = str(msg)
    d = {}
    d["data"] = msg_data
    data_msg = json.dumps(d)
    # data_msg=str(data_msg)
    headers = {
        "Content-type": "application/json",
        "Accept": "application/json",
        "Client-Key": "226762e36d27b8c09b72bd1d522cac08",
    }
    #url = "https://apibeeop.jellytechno.com/api/v3/paprika/log"
    #response = requests.post(url, data=data_msg, headers=headers)
    #print (response)
    print ("\nIncomming message ASCII |%s|" % msg)
    pack = ISO8583()
    try:
        pack.setNetworkISO(msg)
        v1 = pack.getBitsAndValues()
        for v in v1:
            print (
                "Bit %s of type %s with value = %s" % (v["bit"], v["type"], v["value"])
            )
        if pack.getMTI() == "0800":
            networkMIC = msg[-3:]
            if networkMIC == "002":
                print ("Received Logon Request")
            elif networkMIC == "001":
                print ("Received Echo Request")
            print ("\tThat's great !!! The client send a correct message !!!")
            pack.setMTI("0810")
            ans = pack.getNetworkISO()
            print ("Sending answer %s" % ans)
            s.send(ans)
        elif pack.getMTI() == "9080":
            print ("Response answer %s" % msg)
        elif pack.getMTI() == "0810":
            print ("Response answer %s" % msg)
        else:
            print (pack.getMTI())
            print ("The client dosen't send the correct message!")
    except InvalidIso8583, ii:
        print ii
    except:
        print ("Something happened!!!!")
    # conn.send(ans)
    # n = random.randint(0,22)
    # send("Response Logon " str(n))3wswswesttg
    # conn.send("Msg received".encode(FORMAT))


def GenerateToDate(date):
    return date.zfill(2)

#---------------Transaction---------------#
def qr_payment_credit_request_socket(get_request):
    get_month=date.today().month
    get_day=date.today().day
    get_day=GenerateToDate(str(get_day))
    get_month=GenerateToDate(str(get_month))
    localtime=get_day+get_month

    t = time.localtime()
    current_time = time.strftime("%H%M%S", t)

    iso = ISO8583()
    iso.setMTI('0200')
    iso.setBit(2,get_request["merchant_pan"]) #From Client
    iso.setBit(3,'263000') #Code For Create Payment Reques
    iso.setBit(4,get_request["amount"])
    iso.setBit(7,gmt) #Generate From Sistem
    iso.setBit(11,get_request["system_trance_audit_number"]) # Random & unique
    iso.setBit(12,current_time) #Generate From Sistem
    iso.setBit(13,localtime) #Generate From Sistem
    iso.setBit(15,localtime) #Generate From Sistem
    iso.setBit(17,localtime) #Generate From Sistem
    iso.setBit(18,get_request["merchant_type"]) 
    iso.setBit(22,'032')
    iso.setBit(28,'C00'+get_request["amount"]) #From Client
    iso.setBit(32,'00093600823') 
    iso.setBit(33,'00000360002')

    iso.setBit(37,get_request["transaction_id"]) # Random
    iso.setBit(38,'300001')
    iso.setBit(41,get_request["card_acceptor_terminal_identification"]) #From Client
    iso.setBit(42,get_request["card_acceptor_id"]) #From Client
    iso.setBit(43,get_request["card_acceptor_name_location"]) #From Client
    iso.setBit(48,get_request["additional_data"]) #From Client
    iso.setBit(49,'360') #From Client
    iso.setBit(57,'61051031062119CREATE QRIS REQUEST') #Generate From Sistem
    iso.setBit(100,'00093600823')
    iso.setBit(102,get_request["account_identification"])
    global description_status
    global status_set
    global approved
    try:
        message = iso.getNetworkISO()
        s.send(message)
        print ('Sending ... %s' % message)
        approved="success"
        status="success"
        isoAns = ISO8583()
        isoAns.setNetworkISO(message)
        v1 = isoAns.getBitsAndValues()
        for v in v1:
            print ('Bit %s of type %s with value = %s' % (v['bit'],v['type'],v['value']))
    except InvalidIso8583, ii:
        print ii
        status="failed"
        approved="success"
    status_set=0
    if(status=="success"):
        if (approved=="success"):
            return jsonify(status='waiting',error=False,
            description=("Waiting Callback"), message_request=message) 
        else:
            return jsonify(status='failed',error=True,
            description=("Failed Request"), message_request=message)
    else:
        return jsonify(status='failed',error=True,
            description=("Failed Request"), message_request=message)  

NMID 
ID 
Badan USAHA 1 atau 2
01
21




def qr_check_status_request_socket():
    iso = ISO8583()
    iso.setMTI('0200')
    iso.setBit(2,'9360082395320541351') #From Client
    iso.setBit(3,'363000')
    iso.setBit(4,'000005200000')
    iso.setBit(7,gmt) #Generate From Sistem
    iso.setBit(11,'281983')
    iso.setBit(12,'233719') #Generate From Sistem
    iso.setBit(13,'0331') #Generate From Sistem
    iso.setBit(15,'0331') #Generate From Sistem
    iso.setBit(17,'0331') #Generate From Sistem
    iso.setBit(18,'5812') 
    iso.setBit(22,'032')
    iso.setBit(28,'C00200000') #From Client
    iso.setBit(32,'00093600823') 
    iso.setBit(33,'00000360002')
    iso.setBit(37,'300000000001')
    iso.setBit(38,'300001')
    iso.setBit(41,'0000000012345689')
    iso.setBit(42,'00000012345689')
    iso.setBit(43,'MSP CARREFOUR LEBAK BULUS') #From Client
    iso.setBit(48,'PI04Q001CD04BUDIMC03UMI') #From Client
    iso.setBit(49,'360') #From Client
    iso.setBit(57,'61051031062119CREATE QRIS REQUEST') #Generate From Sistem
    iso.setBit(100,'00093600823')
    iso.setBit(102,'00093600823')
    global description_status
    global status_set
    try:
        message = iso.getNetworkISO()
        s.send(message)
        print ('Sending ... %s' % message)
        print("Disini OK")
        ans = s.recv(2048)
        print ("\nResponse ASCIIS |%s|" % ans)
        isoAns = ISO8583()
        isoAns.setNetworkISO(ans)
        v1 = isoAns.getBitsAndValues()
        description_status=101
        for v in v1:
            print ('Bit %s of type %s with value = %s' % (v['bit'],v['type'],v['value']))
            if(v['bit']=="39"):
                description_status=get_response_qr_credit_request(v['value'])
                if(v['value']==00):
                    approved="success"
                else:
                    approved="failed"

        if isoAns.getMTI() == '0810':
            print ("\tThat's great !!! The server understand my message masuk data!!!")
            status="success"
        else:
            print ("The server dosen't understand my message!")
            status="failed"
    except InvalidIso8583, ii:
        print ii
        status="failed"
    status_set=0
    if(status=="success"):
        if (approved=="success"):
            return jsonify(status='success',error=False,
            description=("QR Credit Check Status Success, Response Data = %s" % (ans)),data_iso=ans,description_status_approved=description_status) 
        else:
            return jsonify(status='Failed',error=False,
            description=("QR Credit Check Status Failed, Response Data = %s" % (ans)),data_iso=ans,description_status_approved=description_status) 

    else:
        return jsonify(status='failed',error=False,
            description=("QR Credit Check Status Failed, Response Data = %s" % (ans)),data_iso=ans,description_status_approved=description_status) 


def qr_credit_refund_request_socket():
    iso = ISO8583()
    iso.setMTI('0200')
    iso.setBit(2,'9360082395320541351') #From Client
    iso.setBit(3,'20xx30')
    iso.setBit(4,'000005200000')
    iso.setBit(7,gmt) #Generate From Sistem
    iso.setBit(11,'281983')
    iso.setBit(12,'233719') #Generate From Sistem
    iso.setBit(13,'0331') #Generate From Sistem
    iso.setBit(15,'0331') #Generate From Sistem
    iso.setBit(17,'0331') #Generate From Sistem
    iso.setBit(18,'5812') 
    iso.setBit(22,'032')
    iso.setBit(28,'C00200000') #From Client
    iso.setBit(32,'00093600823') 
    iso.setBit(33,'00000360002')
    iso.setBit(37,'300000000001')
    iso.setBit(38,'300001')
    iso.setBit(41,'0000000012345689')
    iso.setBit(42,'00000012345689')
    iso.setBit(43,'MSP CARREFOUR LEBAK BULUS') #From Client
    iso.setBit(48,'PI04Q001CD04BUDIMC03UMI') #From Client
    iso.setBit(49,'360') #From Client
    iso.setBit(57,'61051031062119CREATE REFUND REQUEST') #Generate From Sistem
    iso.setBit(100,'00093600823')
    iso.setBit(102,'00093600823')
    iso.setBit(123,'18281084810000000000')
    global description_status
    global status_set
    try:
        message = iso.getNetworkISO()
        s.send(message)
        print ('Sending ... %s' % message)
        print("Disini OK")
        ans = s.recv(2048)
        print ("\nResponse ASCIIS |%s|" % ans)
        isoAns = ISO8583()
        isoAns.setNetworkISO(ans)
        v1 = isoAns.getBitsAndValues()
        description_status=101
        for v in v1:
            print ('Bit %s of type %s with value = %s' % (v['bit'],v['type'],v['value']))
            if(v['bit']=="39"):
                description_status=get_response_qr_credit_request(v['value'])
                if(v['value']==00):
                    approved="success"
                else:
                    approved="failed"

        if isoAns.getMTI() == '0810':
            print ("\tThat's great !!! The server understand my message masuk data!!!")
            status="success"
        else:
            print ("The server dosen't understand my message!")
            status="failed"
    except InvalidIso8583, ii:
        print ii
        status="failed"
    status_set=0
    if(status=="success"):
        if (approved=="success"):
            return jsonify(status='success',error=False,
            description=("QR Credit Refund Status Success, Response Data = %s" % (ans)),data_iso=ans,description_status_approved=description_status) 
        else:
            return jsonify(status='Failed',error=False,
            description=("QR Credit Refund Status Failed, Response Data = %s" % (ans)),data_iso=ans,description_status_approved=description_status) 

    else:
        return jsonify(status='failed',error=False,
            description=("QR Credit Refund Status Failed, Response Data = %s" % (ans)),data_iso=ans,description_status_approved=description_status) 





#-------Flask API run---------#
app = Flask(__name__)
CORS(app)

HOST = '127.0.0.1'  # The server's hostname or IP address
PORT = 8000        # The port used by the server


def authorized_check():
    headers = request.headers
    auth = headers.get("X-Api-Key")
    if auth == '567f57b5a271ec56f4d9b46c91c14a95':
        return True
    else:
        return False


#------------------Endpoint For Network Spec--------------#
@app.route('/api/v1/network/login', methods = ['GET'])
def login():
    return logon()

@app.route('/api/v1/network/logoff', methods = ['GET'])
def logoff():
    if(authorized_check()):
        return log_out()
    else:
        return jsonify({"message": "ERROR: Unauthorized"}), 401
    
@app.route('/api/v1/network/echo_test', methods = ['GET'])
def echo_test():
    global status_set
    status_set=1
    return echotest()


@app.route('/api/v1/network/cut_over', methods = ['GET'])
def cutover():
    if(authorized_check()):
        return cutover()
    else:
        return jsonify({"message": "ERROR: Unauthorized"}), 401

@app.route('/api/v1/network/network_status', methods = ['GET'])
def network_status():
    if(authorized_check()):
        return network_status()
    else:
        return jsonify({"message": "ERROR: Unauthorized"}), 401
#------------------Endpoint For Network Spec--------------#

@app.route('/api/v1/payment/qr-payment-credit-request', methods = ['POST'])
def qr_payment_credit_request():
    if request.method == "POST":
        get_request = request.json
        return qr_payment_credit_request_socket(get_request)

@app.route('/api/v1/payment/qr-payment-check-status', methods = ['GET'])
def qr_payment_check_status():
    if request.method == "GET":
        return qr_check_status_request_socket()


@app.route('/api/v1/payment/qr-refund-request', methods = ['GET'])
def qr_payment_refund_request():
    if request.method == "GET":
        return qr_credit_refund_request_socket()
    #if request.method == "POST":
     #   details = request.json
      #  print('Received', repr(details))
    #return(details)


@app.route('/api/v1/payment/qr-inquiry-mpan-request', methods = ['POST'])
def qr_inquiry_mpan_request():
    if request.method == "POST":
        details = request.json
        print('Received', repr(details))
    return(details)


@app.route('/api/v1/payment/qr-payment-debit-request', methods = ['POST'])
def qr_payment_debit_request():
    if request.method == "POST":
        details = request.json
        print('Received', repr(details))
    return(details)

@app.route('/api/v1/payment/qr-payment-debit-reversal-advice', methods = ['POST'])
def qr_payment_debit_reversal_advice_request():
    if request.method == "POST":
        details = request.json
        print('Received', repr(details))
    return(details)

def jsonDumps(get_data):
    return json.loads(json_util.dumps(get_data))    
    

@app.route('/')
def index():
    headers = request.headers
    auth = headers.get("X-Api-Key")
    queue = Queue()
    #p = Process(target=task)
    #p.start()
    #start_thread = threading.Thread(target=task, name="Downloader")
    #start_thread.start()

    #p = multiprocessing.Process(target=task)
    #p.start()

    if request.method == "GET":
        return ("API Brige Rintis to Paprika Tester")


@app.before_first_request
def task():
    headers = request.headers
    auth = headers.get("X-Api-Key")
    queue = Queue()
    #p = Process(target=task)
    #p.start()
    start_thread = threading.Thread(target=task, name="Downloader")
    start_thread.start()

    #p = multiprocessing.Process(target=task)
    #p.start()

    if request.method == "GET":
        return ("API Brige Rintis to Paprika Tester")


#--------Main Connection-------#
def task():
    print ('Something happened!!!!')
    logon()
    ini=0
    global status_set
    while True:
         if(status_set==0):
            try:
               msg=s.recv(2046) 
               handle_client_incoming(msg)  
            except Exception as e:
               raise
            else:
               pass
            finally:
               pass



         #print(msg.decode("utf-8"))
    
#--------Main Connection-------#    

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=1337, debug=False, use_reloader=False, threaded=True)

   


   #time.sleep(3)
   
            


#-------Main Connection Socket Start------#

